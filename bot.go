package main

import (
	"fmt"
	"strings"
	"time"

	"github.com/bwmarrin/discordgo"
	"github.com/dustin/go-humanize"
)

var days = []string{
	"‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå",
	"‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå",
	"‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£",
	"‡∏û‡∏∏‡∏ò",
	"‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ",
	"‡∏®‡∏∏‡∏Å‡∏£‡πå",
	"‡πÄ‡∏™‡∏≤‡∏£‡πå",
}

var months = []string{
	"‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°",
	"‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå",
	"‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°",
	"‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô",
	"‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°",
	"‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
	"‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°",
	"‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°",
	"‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô",
	"‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°",
	"‡∏û‡∏§‡∏©‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô",
	"‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°",
}

func messageCreate(s *discordgo.Session, m *discordgo.MessageCreate) {
	if m.Author.ID == s.State.User.ID {
		return
	}

	content := strings.ToLower(m.Content)

	if strings.HasPrefix(content, "/covid") {
		prms := strings.Split(content, " ")
		if len(prms) == 1 || prms[1] == "today" {
			data, err := getData()
			if err != nil {
				s.ChannelMessageSend(m.ChannelID, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")
				return
			}
			embed, err := buildEmbed(data)
			if err != nil {
				s.ChannelMessageSend(m.ChannelID, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")
				return
			}
			s.ChannelMessageSendEmbed(m.ChannelID, embed)
		}

		if len(prms) > 1 {
			switch prms[1] {
			case "sub", "subscribe":
				_, err := subscribe(m.ChannelID)
				if err != nil {
					s.ChannelMessageSend(m.ChannelID, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")
					return
				}
				/*
					if !ok {
						s.ChannelMessageSend(m.ChannelID, "‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
					}*/

				s.ChannelMessageSend(m.ChannelID, "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
				break

			case "unsub", "unsubscribe":
				_, err := unsubscribe(m.ChannelID)
				if err != nil {
					s.ChannelMessageSend(m.ChannelID, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")
					return
				}
				/*
					if !ok {
						s.ChannelMessageSend(m.ChannelID, "‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß")
					}*/

				s.ChannelMessageSend(m.ChannelID, "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
				break
			case "help":
				s.ChannelMessageSend(m.ChannelID, "‡∏û‡∏¥‡∏°‡∏û‡πå `/covid` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô\n‡∏û‡∏¥‡∏°‡∏û‡πå `/covid sub` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 12.00 ‡∏ô.\n‡∏û‡∏¥‡∏°‡∏û‡πå `/covid unsub` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß")
				break
			}
		}
	}
}

func broadcastSubs() error {
	chList, err := getSubs()
	if err != nil {
		return err
	}
	now := time.Now()
	var data *covidData
	for {
		data, err = getData()
		if err != nil {
			return err
		}

		t, err := time.Parse("02/01/2006 15:04", data.UpdateDate)
		if err != nil {
			return err
		}

		if dateEqual(t, now) {
			break
		}
		time.Sleep(1 * time.Minute)
	}

	embed, err := buildEmbed(data)
	if err != nil {
		return err
	}

	retriedList := make([]string, 0)
	retriedCount := 1
	for _, ch := range *chList {
		_, err = dg.ChannelMessageSendEmbed(ch.DiscordID, embed)
		if err != nil {
			retriedList = append(retriedList, ch.DiscordID)
		}
		time.Sleep(100 * time.Millisecond)
	}
	for {
		if len(retriedList) > 0 {
			fmt.Printf("%v channel failed to deliver. retry attempted: %v\n", len(retriedList), retriedCount)
			if retriedCount > 3 {
				break
			}
			tmp := make([]string, 0)
			time.Sleep(1 * time.Minute)
			for _, id := range retriedList {
				_, err = dg.ChannelMessageSendEmbed(id, embed)
				if err != nil {
					tmp = append(tmp, id)
				}
				time.Sleep(100 * time.Millisecond)
			}
			retriedList = tmp
			retriedCount++
		} else {
			break
		}
	}

	return nil
}

func currentDateTH(t time.Time) string {
	d := days[int(t.Weekday())]
	m := months[int(t.Month())-1]

	return fmt.Sprintf("‡∏ß‡∏±‡∏ô%s‡∏ó‡∏µ‡πà %v %s %v", d, t.Day(), m, t.Year()+543)
}

func buildEmbed(data *covidData) (*discordgo.MessageEmbed, error) {
	t, err := time.Parse("02/01/2006 15:04", data.UpdateDate)
	if err != nil {
		return nil, err
	}
	embed := discordgo.MessageEmbed{
		Title: "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå ‡πÇ‡∏Ñ‡∏ß‡∏¥‡∏î-19 ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢",
		/*
			Author: &discordgo.MessageEmbedAuthor{
				Name:    cfg.Author.Name,
				IconURL: cfg.Author.Icon,
				URL:     cfg.Author.URL,
			},*/

		Description: fmt.Sprintf("%s", currentDateTH(t)),
		Color:       16721136,
		Provider: &discordgo.MessageEmbedProvider{
			Name: "‡∏Å‡∏£‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ",
			URL:  "http://covid19.ddc.moph.go.th/",
		},
		Fields: []*discordgo.MessageEmbedField{
			{
				Name:   "ü§í ‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏™‡∏∞‡∏™‡∏°",
				Value:  fmt.Sprintf("%s (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô %s)", humanize.Comma(int64(data.Confirmed)), humanize.Comma(int64(data.NewConfirmed))),
				Inline: true,
			},
			{
				Name:   "üíÄ ‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï",
				Value:  fmt.Sprintf("%s (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô %s)", humanize.Comma(int64(data.Deaths)), humanize.Comma(int64(data.NewDeaths))),
				Inline: true,
			},
			{
				Name:   "üí™ ‡∏´‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
				Value:  fmt.Sprintf("%s (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô %s)", humanize.Comma(int64(data.Recovered)), humanize.Comma(int64(data.NewRecovered))),
				Inline: true,
			},
			{
				Name:   "üè• ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô ‡∏£‡∏û.",
				Value:  fmt.Sprintf("%s", humanize.Comma(int64(data.Hospitalized))),
				Inline: true,
			},
			{
				Name:   "üü• ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï",
				Value:  fmt.Sprintf("%.2f%%", (float64(data.Deaths)/float64(data.Confirmed))*100),
				Inline: true,
			},
			{
				Name:   "üü© ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏¢",
				Value:  fmt.Sprintf("%.2f%%", (float64(data.Recovered)/float64(data.Confirmed))*100),
				Inline: true,
			},
		},
		URL: "https://covid19.ddc.moph.go.th/",
		Footer: &discordgo.MessageEmbedFooter{
			Text: fmt.Sprintf("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢ ‡∏Å‡∏£‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ\n‡∏ö‡∏≠‡∏ó‡πÇ‡∏î‡∏¢ %s\n%s", cfg.Author.Name, cfg.Author.URL),
		},
	}

	return &embed, nil
}

func dateEqual(date1, date2 time.Time) bool {
	y1, m1, d1 := date1.Date()
	y2, m2, d2 := date2.Date()
	return y1 == y2 && m1 == m2 && d1 == d2
}
