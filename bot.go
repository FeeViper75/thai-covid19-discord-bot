package main

import (
	"fmt"
	"strings"
	"time"

	"github.com/bwmarrin/discordgo"
	"github.com/dustin/go-humanize"
)

var days = []string{
	"‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå",
	"‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå",
	"‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£",
	"‡∏û‡∏∏‡∏ò",
	"‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ",
	"‡∏®‡∏∏‡∏Å‡∏£‡πå",
	"‡πÄ‡∏™‡∏≤‡∏£‡πå",
}

var months = []string{
	"‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°",
	"‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå",
	"‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°",
	"‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô",
	"‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°",
	"‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
	"‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°",
	"‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°",
	"‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô",
	"‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°",
	"‡∏û‡∏§‡∏©‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô",
	"‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°",
}

func messageCreate(s *discordgo.Session, m *discordgo.MessageCreate) {
	if m.Author.ID == s.State.User.ID {
		return
	}

	content := strings.ToLower(m.Content)

	if strings.HasPrefix(content, "/covid") {
		prms := strings.Split(content, " ")
		if len(prms) == 1 || prms[1] == "today" {
			data, err := getData()
			if err != nil {
				s.ChannelMessageSend(m.ChannelID, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")
			}
			t, err := time.Parse("02/01/2006 15:04", data.UpdateDate)
			if err != nil {
				s.ChannelMessageSend(m.ChannelID, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á")
			}
			embed := discordgo.MessageEmbed{
				Title: "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå ‡πÇ‡∏Ñ‡∏ß‡∏¥‡∏î-19",
				Author: &discordgo.MessageEmbedAuthor{
					Name:    cfg.Author.Name,
					IconURL: cfg.Author.Icon,
					URL:     cfg.Author.URL,
				},
				Color: 16721136,
				Provider: &discordgo.MessageEmbedProvider{
					Name: "‡∏Å‡∏£‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ",
					URL:  "http://covid19.ddc.moph.go.th/",
				},
				Fields: []*discordgo.MessageEmbedField{
					{
						Name:   fmt.Sprintf("%s", currentDateTH(t)),
						Value:  "\u200B",
						Inline: false,
					},
					{
						Name:   "ü§í ‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏™‡∏∞‡∏™‡∏°",
						Value:  fmt.Sprintf("%s (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô %s)", humanize.Comma(int64(data.Confirmed)), humanize.Comma(int64(data.NewConfirmed))),
						Inline: true,
					},
					{
						Name:   "üíÄ ‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï",
						Value:  fmt.Sprintf("%s (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô %s)", humanize.Comma(int64(data.Deaths)), humanize.Comma(int64(data.NewDeaths))),
						Inline: true,
					},
					{
						Name:   "üí™ ‡∏´‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
						Value:  fmt.Sprintf("%s (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô %s)", humanize.Comma(int64(data.Recovered)), humanize.Comma(int64(data.NewRecovered))),
						Inline: true,
					},
					{
						Name:   "üè• ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô ‡∏£‡∏û.",
						Value:  fmt.Sprintf("%s", humanize.Comma(int64(data.Hospitalized))),
						Inline: true,
					},
					{
						Name:   "üü• ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï",
						Value:  fmt.Sprintf("%.2f%%", (float64(data.Deaths)/float64(data.Confirmed))*100),
						Inline: true,
					},
					{
						Name:   "üü© ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏¢",
						Value:  fmt.Sprintf("%.2f%%", (float64(data.Recovered)/float64(data.Confirmed))*100),
						Inline: true,
					},
				},
				URL: "https://covid19.ddc.moph.go.th/",
				Footer: &discordgo.MessageEmbedFooter{
					Text: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡∏Å‡∏£‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ https://covid19.ddc.moph.go.th/",
				},
			}

			s.ChannelMessageSendEmbed(m.ChannelID, &embed)
		}
	}
}

func currentDateTH(t time.Time) string {
	d := days[int(t.Weekday())]
	m := months[int(t.Month())-1]

	return fmt.Sprintf("‡∏ß‡∏±‡∏ô%s‡∏ó‡∏µ‡πà %v %s %v", d, t.Day(), m, t.Year()+543)
}
