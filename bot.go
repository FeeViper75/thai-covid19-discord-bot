package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"log"
	"net/url"
	"strconv"
	"strings"
	"time"

	"github.com/bwmarrin/discordgo"
	"github.com/dustin/go-humanize"
	"github.com/golang/freetype/truetype"
	"github.com/wcharczuk/go-chart"
	"github.com/wcharczuk/go-chart/drawing"
)

var (
	days = []string{
		"‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå",
		"‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå",
		"‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£",
		"‡∏û‡∏∏‡∏ò",
		"‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ",
		"‡∏®‡∏∏‡∏Å‡∏£‡πå",
		"‡πÄ‡∏™‡∏≤‡∏£‡πå",
	}

	months = []string{
		"‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°",
		"‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå",
		"‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°",
		"‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô",
		"‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°",
		"‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
		"‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°",
		"‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°",
		"‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô",
		"‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°",
		"‡∏û‡∏§‡∏©‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô",
		"‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°",
	}

	riskLevels = []string{
		"‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ï‡πà‡∏≥",
		"‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á",
		"‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏π‡∏á",
		"‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å",
	}
)

const (
	messageError = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á"
	helpMsg      = "‡∏û‡∏¥‡∏°‡∏û‡πå \"/covid\" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô\n‡∏û‡∏¥‡∏°‡∏û‡πå \"/covid sub\" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 12.00 ‡∏ô.\n‡∏û‡∏¥‡∏°‡∏û‡πå \"/covid unsub\" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß\n‡∏û‡∏¥‡∏°‡∏û‡πå \"/covid check\" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á"
)

func messageCreate(s *discordgo.Session, m *discordgo.MessageCreate) {
	if m.Author.ID == s.State.User.ID {
		return
	}

	content := strings.ToLower(m.Content)

	if strings.HasPrefix(content, "/covid") {
		prms := strings.Split(content, " ")
		if len(prms) == 1 || prms[1] == "today" {
			msgData := &discordgo.MessageSend{}
			var embed *discordgo.MessageEmbed
			var file *bytes.Buffer
			t := time.Now()
			t = t.In(loc)
			if embedCache, found := ca.Get("embed"); found {
				embed = embedCache.(*discordgo.MessageEmbed)
			}

			if embed == nil {
				data, err := getData()
				if err != nil {
					s.ChannelMessageSend(m.ChannelID, messageError)
					return
				}
				td, err := time.Parse("02/01/2006 15:04", data.UpdateDate)
				if err != nil {
					s.ChannelMessageSend(m.ChannelID, messageError)
					return
				}
				embed, err = buildEmbed(data)
				if err != nil {
					s.ChannelMessageSend(m.ChannelID, messageError)
					return
				}
				if imgCache, ok := ca.Get(fmt.Sprintf("chart-%s", td.Format("Jan2"))); ok {
					embed.Image = imgCache.(*discordgo.MessageEmbedImage)
				}

				if embed.Image == nil {
					file, err = buildChart()
					if err != nil {
						s.ChannelMessageSend(m.ChannelID, messageError)
						return
					}
					chart := &discordgo.File{
						Name:        fmt.Sprintf("covid-chart-%s.png", td.Format("20060102")),
						ContentType: "image/png",
						Reader:      file,
					}
					msgData.Files = append(msgData.Files, chart)
					t = td
				}
			}

			msgData.Embed = embed
			resp, err := s.ChannelMessageSendComplex(m.ChannelID, msgData)
			if err != nil {
				return
			}
			if embed.Image == nil {
				at := resp.Attachments[0]
				embed.Image = &discordgo.MessageEmbedImage{
					URL:      at.URL,
					ProxyURL: at.ProxyURL,
					Height:   at.Height,
					Width:    at.Width,
				}

				ca.Set(fmt.Sprintf("chart-%s", t.Format("Jan2")), embed.Image, 36*time.Hour)
				ca.Set("embed", embed, 30*time.Minute)
				s.ChannelMessageEditEmbed(m.ChannelID, resp.ID, embed)
			}
		}

		if len(prms) > 1 {
			switch prms[1] {
			case "sub", "subscribe":
				_, err := subscribe(m.ChannelID)
				if err != nil {
					s.ChannelMessageSend(m.ChannelID, messageError)
					return
				}
				/*
					if !ok {
						s.ChannelMessageSend(m.ChannelID, "‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
					}*/

				s.ChannelMessageSend(m.ChannelID, "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
				break

			case "unsub", "unsubscribe":
				_, err := unsubscribe(m.ChannelID)
				if err != nil {
					s.ChannelMessageSend(m.ChannelID, messageError)
					return
				}
				/*
					if !ok {
						s.ChannelMessageSend(m.ChannelID, "‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß")
					}*/

				s.ChannelMessageSend(m.ChannelID, "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
				break
			case "help":
				s.ChannelMessageSend(m.ChannelID, helpMsg)
				break
			case "check":
				if len(m.GuildID) > 0 {
					s.ChannelMessageSend(m.ChannelID, "‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏≤‡∏ö‡∏≠‡∏ó‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô")
				} else {
					err := startCheck(m.ChannelID)
					if err != nil {
						s.ChannelMessageSend(m.ChannelID, err.Error())
					}
				}
				break
			default:
				s.ChannelMessageSend(m.ChannelID, helpMsg)
				break
			}

		}
	}
}

func broadcastSubs() error {
	chList, err := getSubs()
	if err != nil {
		return err
	}
	now := time.Now().In(loc)
	var data *covidData
	//delayNotice := true
	for {
		data, err = getData()
		if err != nil {
			return err
		}

		t, err := time.Parse("02/01/2006 15:04", data.UpdateDate)
		if err != nil {
			return err
		}

		if dateEqual(t, now) {
			now = t
			break
		}
		fmt.Printf("broadcast data not update, retrying...\n")
		time.Sleep(5 * time.Minute)

	}

	embed, err := buildEmbed(data)
	if err != nil {
		return err
	}

	file, err := buildChart()
	if err != nil {
		return err
	}

	chart := &discordgo.File{
		Name:        fmt.Sprintf("covid-chart-%s.png", now.Format("20060102")),
		ContentType: "image/png",
		Reader:      file,
	}
	msgData := &discordgo.MessageSend{
		Embed: embed,
	}
	msgData.Files = append(msgData.Files, chart)

	retriedList := make([]string, 0)
	retriedCount := 1

	for _, ch := range *chList {
		shardID := getShardID(ch.DiscordID)
		resp, err := dgs[shardID].ChannelMessageSendComplex(ch.DiscordID, msgData)
		if err != nil {
			retriedList = append(retriedList, ch.DiscordID)
		}

		if embed.Image == nil {
			at := resp.Attachments[0]
			embed.Image = &discordgo.MessageEmbedImage{
				URL:      at.URL,
				ProxyURL: at.ProxyURL,
				Height:   at.Height,
				Width:    at.Width,
			}
			ca.Set(fmt.Sprintf("chart-%s", now.Format("Jan2")), embed.Image, 36*time.Hour)
			ca.Set("embed", embed, 30*time.Minute)
			dgs[shardID].ChannelMessageEditEmbed(ch.DiscordID, resp.ID, embed)
			msgData = &discordgo.MessageSend{
				Embed: embed,
			}
		}
		time.Sleep(100 * time.Millisecond)
	}

	for {
		if len(retriedList) > 0 {
			if retriedCount > 3 {
				fmt.Printf("%v channels unsubscribe after 3 retries\n", len(retriedList))
				ubsubscribeBulk(retriedList)
				break
			}
			fmt.Printf("%v channel failed to deliver. retry attempted: %v\n", len(retriedList), retriedCount)
			tmp := make([]string, 0)
			time.Sleep(1 * time.Minute)
			for _, id := range retriedList {
				_, err = dgs[0].ChannelMessageSendEmbed(id, embed)
				if err != nil {
					tmp = append(tmp, id)
				}
				time.Sleep(100 * time.Millisecond)
			}
			retriedList = tmp
			retriedCount++
		} else {
			break
		}
	}
	now = time.Now().In(loc)
	fmt.Printf("finished broadcast at %s\n", now.Format(time.Stamp))
	err = stampBroadcastDate()
	if err != nil {
		fmt.Printf("error stamp broadcast date %s", err.Error())
	}
	return nil
}

func currentDateTH(t time.Time) string {
	d := days[int(t.Weekday())]
	m := months[int(t.Month())-1]

	return fmt.Sprintf("‡∏ß‡∏±‡∏ô%s‡∏ó‡∏µ‡πà %v %s %v", d, t.Day(), m, t.Year()+543)
}

func buildEmbed(data *covidData) (*discordgo.MessageEmbed, error) {
	t, err := time.Parse("02/01/2006 15:04", data.UpdateDate)
	if err != nil {
		return nil, err
	}
	embed := discordgo.MessageEmbed{
		Title: "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå ‡πÇ‡∏Ñ‡∏ß‡∏¥‡∏î-19 ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢",
		/*
			Author: &discordgo.MessageEmbedAuthor{
				Name:    cfg.Author.Name,
				IconURL: cfg.Author.Icon,
				URL:     cfg.Author.URL,
			},*/

		Description: fmt.Sprintf("%s", currentDateTH(t)),
		Color:       16721136,
		Provider: &discordgo.MessageEmbedProvider{
			Name: "‡∏Å‡∏£‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ",
			URL:  "http://covid19.ddc.moph.go.th/",
		},
		Fields: []*discordgo.MessageEmbedField{
			{
				Name:   "ü§í ‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏™‡∏∞‡∏™‡∏°",
				Value:  fmt.Sprintf("%s (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô %s)", humanize.Comma(int64(data.Confirmed)), humanize.Comma(int64(data.NewConfirmed))),
				Inline: true,
			},
			{
				Name:   "üíÄ ‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï",
				Value:  fmt.Sprintf("%s (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô %s)", humanize.Comma(int64(data.Deaths)), humanize.Comma(int64(data.NewDeaths))),
				Inline: true,
			},
			{
				Name:   "üí™ ‡∏´‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
				Value:  fmt.Sprintf("%s (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô %s)", humanize.Comma(int64(data.Recovered)), humanize.Comma(int64(data.NewRecovered))),
				Inline: true,
			},
			{
				Name:   "üè• ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô ‡∏£‡∏û.",
				Value:  fmt.Sprintf("%s", humanize.Comma(int64(data.Hospitalized))),
				Inline: true,
			},
			{
				Name:   "üü• ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï",
				Value:  fmt.Sprintf("%.2f%%", (float64(data.Deaths)/float64(data.Confirmed))*100),
				Inline: true,
			},
			{
				Name:   "üü© ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏¢",
				Value:  fmt.Sprintf("%.2f%%", (float64(data.Recovered)/float64(data.Confirmed))*100),
				Inline: true,
			},
		},
		URL: "https://covid19.ddc.moph.go.th/",
		Footer: &discordgo.MessageEmbedFooter{
			Text: fmt.Sprintf("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢ ‡∏Å‡∏£‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ\n‡∏ö‡∏≠‡∏ó‡πÇ‡∏î‡∏¢ %s\n%s", cfg.Author.Name, cfg.Author.URL),
		},
	}

	return &embed, nil
}

func dateEqual(date1, date2 time.Time) bool {
	y1, m1, d1 := date1.Date()
	y2, m2, d2 := date2.Date()
	return y1 == y2 && m1 == m2 && d1 == d2
}

func getShardID(channelID string) int {
	if cfg.ShardCount == 1 {
		return 0
	}
	gid, err := strconv.ParseUint(channelID, 10, 64)
	if err != nil {
		return 0
	}
	shardID := (gid >> 22) % uint64(cfg.ShardCount)
	return int(shardID)
}

func buildChart() (*bytes.Buffer, error) {
	data, err := getChartData()
	if err != nil {
		return nil, err
	}

	dlen := len(data.Data) - 30
	if dlen < 0 {
		dlen = 0
	}

	ttfData, err := ioutil.ReadFile("font/Kanit-Medium.ttf")
	if err != nil {
		log.Fatal(err)
	}
	f, err := truetype.Parse(ttfData)
	if err != nil {
		log.Fatal(err)
	}

	dt := data.Data[dlen:]
	dlen = len(dt)
	ticks := make([]chart.Tick, dlen)
	max := 0
	c := chart.ContinuousSeries{
		Name:    "‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏™‡∏∞‡∏™‡∏°",
		XValues: make([]float64, dlen),
		YValues: make([]float64, dlen),
		Style: chart.Style{
			StrokeColor: drawing.ColorFromHex("e1298e"),
			FillColor:   drawing.ColorFromHex("e1298e").WithAlpha(32),
			Show:        true,
		},
	}
	d := chart.ContinuousSeries{
		Name:    "‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï",
		XValues: make([]float64, dlen),
		YValues: make([]float64, dlen),
		Style: chart.Style{
			StrokeColor: drawing.ColorBlack,
			FillColor:   drawing.ColorBlack.WithAlpha(32),
			Show:        true,
		},
	}
	r := chart.ContinuousSeries{
		Name:    "‡∏´‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
		XValues: make([]float64, dlen),
		YValues: make([]float64, dlen),
		Style: chart.Style{
			StrokeColor: drawing.ColorFromHex("046034"),
			FillColor:   drawing.ColorFromHex("046034").WithAlpha(32),
			Show:        true,
		},
	}
	h := chart.ContinuousSeries{
		Name:    "‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô ‡∏£‡∏û.",
		XValues: make([]float64, dlen),
		YValues: make([]float64, dlen),
		Style: chart.Style{
			StrokeColor: drawing.ColorFromHex("179c9b"),
			FillColor:   drawing.ColorFromHex("179c9b").WithAlpha(32),
			Show:        true,
		},
	}
	for i, v := range dt {
		t, err := time.Parse("01/02/2006", dt[i].Date)
		if err != nil {
			return nil, err
		}
		xv := float64(t.Unix())
		ticks[i] = chart.Tick{Value: xv}
		if (i+1)%5 == 0 || i == 0 {
			ticks[i].Label = fmt.Sprintf("%v %s", t.Day(), months[t.Month()-1])
		}
		c.XValues[i] = xv
		d.XValues[i] = xv
		r.XValues[i] = xv
		h.XValues[i] = xv

		c.YValues[i] = float64(v.Confirmed)
		d.YValues[i] = float64(v.Deaths)
		r.YValues[i] = float64(v.Recovered)
		h.YValues[i] = float64(v.Hospitalized)

		if v.Confirmed > max {
			max = v.Confirmed
		}
	}
	graph := chart.Chart{
		Font:   f,
		Height: 300,
		Width:  600,
		XAxis: chart.XAxis{
			Ticks: ticks,
			Style: chart.StyleShow(),
		},
		YAxis: chart.YAxis{
			Range: &chart.ContinuousRange{
				Min: 0.0,
				Max: float64(max),
			},
			Style: chart.StyleShow(),
			ValueFormatter: func(v interface{}) string {
				if vf, isFloat := v.(float64); isFloat {
					return fmt.Sprintf("%s", humanize.Comma(int64(vf)))
				}
				return ""
			},
		},
		Series: []chart.Series{c, d, r, h},
	}
	graph.Elements = []chart.Renderable{
		chart.Legend(&graph),
	}
	buf := new(bytes.Buffer)

	err = graph.Render(chart.PNG, buf)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}
	return buf, nil
}

func startCheck(channelID string) error {
	embed := &discordgo.MessageEmbed{
		Title:       "‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏ô COVID19",
		Color:       16721136,
		URL:         "https://covid19.th-stat.com/th/self_screening?ans=",
		Description: "‡∏Ç‡πâ‡∏≠ 1/8\n‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏°‡∏µ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏Å‡∏≤‡∏¢‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà 37.5 ‡∏≠‡∏á‡∏®‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏Ç‡πâ",
	}
	msg, err := dgs[0].ChannelMessageSendEmbed(channelID, embed)
	if err != nil {
		return err
	}
	err = dgs[0].MessageReactionAdd(channelID, msg.ID, "‚úÖ")
	if err != nil {
		return err
	}
	err = dgs[0].MessageReactionAdd(channelID, msg.ID, "‚ùå")
	if err != nil {
		return err
	}

	return nil
}

func checkReactionAdd(s *discordgo.Session, m *discordgo.MessageReactionAdd) {
	if m.UserID == s.State.User.ID {
		return
	}
	val := 2
	if m.Emoji.Name == "‚úÖ" {
		val = 1
	} else if m.Emoji.Name == "‚ùå" {
		val = 0
	}
	checkUpdateEmbed(s, m.ChannelID, m.MessageID, val)
}

func checkReactionRemove(s *discordgo.Session, m *discordgo.MessageReactionRemove) {
	if m.UserID == s.State.User.ID {
		return
	}
	val := 2
	if m.Emoji.Name == "‚úÖ" {
		val = 1
	} else if m.Emoji.Name == "‚ùå" {
		val = 0
	}
	checkUpdateEmbed(s, m.ChannelID, m.MessageID, val)
}

func checkUpdateEmbed(s *discordgo.Session, chID, msgID string, val int) {

	msg, err := s.ChannelMessage(chID, msgID)
	if err != nil {
		s.ChannelMessageSend(chID, err.Error())
	}

	if msg != nil && msg.Embeds != nil && len(msg.Embeds) > 0 && val != 2 {
		embed := msg.Embeds[0]
		if embed.Title == "‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏ô COVID19" {
			u, _ := url.Parse(embed.URL)
			q, _ := url.ParseQuery(u.RawQuery)
			ansq := q.Get("ans")
			ansStr := strings.Split(ansq, ",")
			var al int
			if len(ansq) == 0 {
				al = 0
				embed.URL += fmt.Sprintf("%v", val)
			} else {
				al = len(ansStr)
				embed.URL += fmt.Sprintf(",%v", val)
			}
			switch al {
			case 0:
				embed.Description = "‡∏Ç‡πâ‡∏≠ 2/8\n‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏´‡∏≤‡∏¢‡πÉ‡∏à ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏î‡∏±‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ \"‡πÑ‡∏≠ ‡∏ô‡πâ‡∏≥‡∏°‡∏π‡∏Å ‡πÄ‡∏à‡πá‡∏ö‡∏Ñ‡∏≠ ‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏•‡∏≥‡∏ö‡∏≤‡∏Å\""
				break
			case 1:
				embed.Description = "‡∏Ç‡πâ‡∏≠ 3/8\n‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á ‡∏´‡∏£‡∏∑‡∏≠ ‡∏°‡∏≤‡∏à‡∏≤‡∏Å ‡∏´‡∏£‡∏∑‡∏≠ ‡∏≠‡∏≤‡∏®‡∏±‡∏¢‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡πÇ‡∏£‡∏Ñ COVID-19 ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 14 ‡∏ß‡∏±‡∏ô ‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡πà‡∏ß‡∏¢"
				break
			case 2:
				embed.Description = "‡∏Ç‡πâ‡∏≠ 4/8\n‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ä‡∏¥‡∏î‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô COVID-19 (‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏ß‡πà‡∏≤ 1 ‡πÄ‡∏°‡∏ï‡∏£ ‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ) ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 14 ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô"
				break
			case 3:
				embed.Description = "‡∏Ç‡πâ‡∏≠ 5/8\n‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÑ‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏∏‡∏°‡∏ô‡∏∏‡∏°‡∏ä‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏ß‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ñ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏ï‡∏•‡∏≤‡∏î‡∏ô‡∏±‡∏î ‡∏´‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏• ‡∏´‡∏£‡∏∑‡∏≠ ‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞"
				break
			case 4:
				embed.Description = "‡∏Ç‡πâ‡∏≠ 6/8\n‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™‡πÉ‡∏Å‡∏•‡πâ‡∏ä‡∏¥‡∏î‡∏Å‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ï‡πà‡∏≤‡∏á‡∏ä‡∏≤‡∏ï‡∏¥ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏≠‡∏≠‡∏±‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏°‡∏≤‡∏Å"
				break
			case 5:
				embed.Description = "‡∏Ç‡πâ‡∏≠ 7/8\n‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏û‡∏ó‡∏¢‡πå"
				break
			case 6:
				embed.Description = "‡∏Ç‡πâ‡∏≠ 8/8\n‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏Å‡∏•‡πâ‡∏ä‡∏¥‡∏î‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏Ç‡πâ‡∏´‡∏ß‡∏±‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 5 ‡∏Ñ‡∏ô ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡∏õ‡πà‡∏ß‡∏¢"
				break
			case 7:
				ans := make([]int, len(ansStr))
				for i, v := range ansStr {
					ans[i], err = strconv.Atoi(v)
					if err != nil {
						s.ChannelMessageSend(chID, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÇ‡∏õ‡∏£‡∏î‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
						return
					}
				}
				found := false
				for _, v := range checkResults {
					if v.Fever == ans[0] &&
						v.OneURISymp == ans[1] &&
						v.TravelRiskCountry == ans[2] &&
						v.Covid19Contact == ans[3] &&
						(v.CloseRiskCountry == ans[4] || v.CloseRiskLocation == ans[4]) &&
						v.IntContact == ans[5] &&
						v.MedProf == ans[6] &&
						v.CloseCon == val {
						found = true
						embed.Description = "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"
						embed.Fields = []*discordgo.MessageEmbedField{
							{
								Name:  "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á",
								Value: riskLevels[v.RiskLevel-1],
							},
							{
								Name:  "‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô",
								Value: v.GenAction,
							},
						}
						if len(v.SpecAction) > 0 {
							embed.Fields = append(embed.Fields, &discordgo.MessageEmbedField{
								Name:  "‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏ö‡∏ö‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á",
								Value: v.SpecAction,
							})
						}
						break
					}
				}
				if found {
					_, err = s.ChannelMessageEditEmbed(chID, msg.ID, embed)
					if err != nil {
						s.ChannelMessageSend(chID, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÇ‡∏õ‡∏£‡∏î‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
						return
					}
				} else {
					// default answer
					v := searchResult(177)
					found = true
					embed.Description = "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"
					embed.Fields = []*discordgo.MessageEmbedField{
						{
							Name:  "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á",
							Value: riskLevels[v.RiskLevel-1],
						},
						{
							Name:  "‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô",
							Value: v.GenAction,
						},
					}
					if len(v.SpecAction) > 0 {
						embed.Fields = append(embed.Fields, &discordgo.MessageEmbedField{
							Name:  "‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏ö‡∏ö‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á",
							Value: v.SpecAction,
						})
					}
					_, err = s.ChannelMessageEditEmbed(chID, msg.ID, embed)
					if err != nil {
						s.ChannelMessageSend(chID, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÇ‡∏õ‡∏£‡∏î‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
						return
					}
				}
				return
			case 8:
				return
			default:
				return
			}
			_, err = s.ChannelMessageEditEmbed(chID, msg.ID, embed)
			if err != nil {
				s.ChannelMessageSend(chID, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÇ‡∏õ‡∏£‡∏î‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
				return
			}
		}
	}
}

func searchResult(idx int) *checkResult {
	for _, v := range checkResults {
		if v.Index == idx {
			return &v
		}
	}
	return nil
}
